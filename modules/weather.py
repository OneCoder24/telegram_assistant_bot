# modules/weather.py
from logger_config import get_logger
from database import get_db
from utils.weather_api import get_current_weather, get_weather_forecast, get_current_weather_by_coords

logger = get_logger()
db = get_db()

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã ---

async def get_formatted_current_weather(user_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    """
    try:
        settings = db.get_settings(user_id)
        default_city = settings.get("main_city", "Moscow") # –ò—Å–ø–æ–ª—å–∑—É–µ–º main_city –∫–∞–∫ default_city

        weather_data = await get_current_weather(default_city)
        if not weather_
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{default_city}'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç–≤–µ—Ç–∞
        city_name = weather_data['city']
        temp = weather_data['temperature']
        apparent_temp = weather_data['apparent_temperature']
        wind_speed = weather_data['wind_speed']
        # precipitation = weather_data['precipitation'] # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–∞–¥–∫–æ–≤
        # rain = weather_data['rain'] # –î–æ–∂–¥—å
        # showers = weather_data['showers'] # –õ–∏–≤–Ω–∏
        # snowfall = weather_data['snowfall'] # –°–Ω–µ–≥

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Å–∞–¥–∫–æ–≤ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
        precip_type = "–ë–µ–∑ –æ—Å–∞–¥–∫–æ–≤"
        if weather_data['rain'] and weather_data['rain'] > 0:
            precip_type = f"–î–æ–∂–¥—å {weather_data['rain']} –º–º"
        elif weather_data['showers'] and weather_data['showers'] > 0:
            precip_type = f"–õ–∏–≤–Ω–∏ {weather_data['showers']} –º–º"
        elif weather_data['snowfall'] and weather_data['snowfall'] > 0:
            precip_type = f"–°–Ω–µ–≥ {weather_data['snowfall']} —Å–º"
        elif weather_data['precipitation'] and weather_data['precipitation'] > 0:
             precip_type = f"–û—Å–∞–¥–∫–∏ {weather_data['precipitation']} –º–º"


        response_text = (
            f"üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ {city_name}:\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {apparent_temp}¬∞C)\n"
            f"üí® –í–µ—Ç–µ—Ä: {wind_speed} –∫–º/—á\n"
            f"üåßÔ∏è –û—Å–∞–¥–∫–∏: {precip_type}\n"
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        )
        return response_text

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏/—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –¥–ª—è user_id {user_id}: {e}")
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã."

async def get_formatted_forecast(user_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 3 –¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    """
    try:
        settings = db.get_settings(user_id)
        default_city = settings.get("main_city", "Moscow")

        forecast_data = await get_weather_forecast(default_city, days=3)
        if not forecast_
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{default_city}'."

        city_name = forecast_data['city']
        forecast_list = forecast_data['forecast']

        response_lines = [f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {city_name} –Ω–∞ 3 –¥–Ω—è:"]
        for day_data in forecast_list:
            date_str = day_data['date']
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç datetime –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                date_obj = datetime.fromisoformat(date_str)
                formatted_date = date_obj.strftime("%d.%m.%Y")
            except ValueError:
                formatted_date = date_str # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å

            temp_max = day_data['temperature_max']
            temp_min = day_data['temperature_min']
            precip_sum = day_data['precipitation_sum']
            wind_max = day_data['wind_speed_max']

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Å–∞–¥–∫–æ–≤ –¥–ª—è –¥–Ω—è (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
            precip_desc = "–ë–µ–∑ –æ—Å–∞–¥–∫–æ–≤"
            if precip_sum and precip_sum > 0:
                precip_desc = f"{precip_sum} –º–º"

            response_lines.append(
                f"üóì {formatted_date}:\n"
                f"  üå°Ô∏è {temp_min}¬∞C .. {temp_max}¬∞C\n"
                f"  üíß –û—Å–∞–¥–∫–∏: {precip_desc}\n"
                f"  üí® –í–µ—Ç–µ—Ä –º–∞–∫—Å.: {wind_max} –∫–º/—á"
            )

        return "\n\n".join(response_lines)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏/—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è user_id {user_id}: {e}")
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã."

async def get_formatted_weather_by_coords(user_id, latitude, longitude):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.
    """
    try:
        weather_data = await get_current_weather_by_coords(latitude, longitude)
        if not weather_
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –ø–æ –≤–∞—à–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é."

        city_name = weather_data['city'] # "–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
        temp = weather_data['temperature']
        apparent_temp = weather_data['apparent_temperature']
        wind_speed = weather_data['wind_speed']
        # precipitation = weather_data['precipitation']
        # rain = weather_data['rain']
        # showers = weather_data['showers']
        # snowfall = weather_data['snowfall']

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Å–∞–¥–∫–æ–≤ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
        precip_type = "–ë–µ–∑ –æ—Å–∞–¥–∫–æ–≤"
        if weather_data['rain'] and weather_data['rain'] > 0:
            precip_type = f"–î–æ–∂–¥—å {weather_data['rain']} –º–º"
        elif weather_data['showers'] and weather_data['showers'] > 0:
            precip_type = f"–õ–∏–≤–Ω–∏ {weather_data['showers']} –º–º"
        elif weather_data['snowfall'] and weather_data['snowfall'] > 0:
            precip_type = f"–°–Ω–µ–≥ {weather_data['snowfall']} —Å–º"
        elif weather_data['precipitation'] and weather_data['precipitation'] > 0:
             precip_type = f"–û—Å–∞–¥–∫–∏ {weather_data['precipitation']} –º–º"

        response_text = (
            f"üìç –ü–æ–≥–æ–¥–∞ –≤ {city_name} (–ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º):\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {apparent_temp}¬∞C)\n"
            f"üí® –í–µ—Ç–µ—Ä: {wind_speed} –∫–º/—á\n"
            f"üåßÔ∏è –û—Å–∞–¥–∫–∏: {precip_type}\n"
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        )
        return response_text

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏/—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –¥–ª—è user_id {user_id}: {e}")
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é."

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∑–∞–≥–ª—É—à–∫–∞) ---
async def send_daily_weather_notification(user_id, send_message_func):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ.
    –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        settings = db.get_settings(user_id)
        if not settings.get("daily_weather_enabled", False):
            logger.debug(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è user_id {user_id}.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–≥–æ–¥—É
        weather_message = await get_formatted_current_weather(user_id)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # send_message_func(chat_id=user_id, text=weather_message, reply_markup=None, parse_mode=None)
        # NOTE: send_message_func –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–∞ –∏–∑ bot.py –∏ –∏–º–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–∏–≥–Ω–∞—Ç—É—Ä—É
        logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id {user_id}.")
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏, send_message_func –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ.
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º.
        print(f"[DAILY_WEATHER] –û—Ç–ø—Ä–∞–≤–∫–∞ user_id {user_id}: {weather_message}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –¥–ª—è user_id {user_id}: {e}")


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
if __name__ == "__main__":
    import asyncio
    from datetime import datetime # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º datetime –¥–ª—è —Ç–µ—Å—Ç–∞

    async def test_module():
        print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è weather...")
        # –¢–µ—Å—Ç–æ–≤—ã–µ user_id
        test_user_id = 123456789 # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π user_id –¥–ª—è —Ç–µ—Å—Ç–∞

        print("\n--- –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) ---")
        current_msg = asyncio.run(get_formatted_current_weather(test_user_id))
        print(current_msg)

        print("\n--- –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) ---")
        forecast_msg = asyncio.run(get_formatted_forecast(test_user_id))
        print(forecast_msg)

        print("\n--- –ü–æ–≥–æ–¥–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º ---")
        lat, lon = 55.7558, 37.6176 # –ú–æ—Å–∫–≤–∞
        coords_msg = asyncio.run(get_formatted_weather_by_coords(test_user_id, lat, lon))
        print(coords_msg)

        print("\n--- –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–∑–∞–≥–ª—É—à–∫–∞) ---")
        # send_daily_weather_notification –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ –±–µ–∑ send_message_func
        # asyncio.run(send_daily_weather_notification(test_user_id, lambda **kwargs: print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {kwargs}")))

    # asyncio.run(test_module()) # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç asyncio.run –Ω–∞–ø—Ä—è–º—É—é